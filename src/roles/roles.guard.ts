import { Injectable, CanActivate, ExecutionContext } from '@nestjs/common';
import { Reflector } from '@nestjs/core';
import { Role } from './roles.enum';

@Injectable()
export class RolesGuard implements CanActivate {
  constructor(private reflector: Reflector) {}

  canActivate(context: ExecutionContext): boolean {
    const requiredRoles = this.reflector.getAllAndOverride<Role[]>('roles', [
      context.getHandler(),
      context.getClass(),
    ]);

    const request = context.switchToHttp().getRequest();
    const user = request.user;

    console.log('üîê Required Roles:', requiredRoles);

    if (!requiredRoles || requiredRoles.length === 0) {
      console.log('‚úÖ –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à—ë–Ω: —Ä–æ–ª–∏ –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è');
      return true;
    }

    if (!user || !user.role) {
      console.log('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω: –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —Ä–æ–ª–∏');
      return false;
    }

    const userRole = user.role.toLowerCase();

    if (userRole === Role.Extra) {
      console.log('üõ°Ô∏è EXTRA: –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø');
      return true;
    }

    const hasAccess = requiredRoles.some(role => {
      const requiredRole = role.toLowerCase();

      if (requiredRole === Role.Owner && userRole === Role.Owner) return true;

      return requiredRole === userRole;
    });

    console.log(hasAccess ? '‚úÖ –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à—ë–Ω' : '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω');
    return hasAccess;
  }
}
